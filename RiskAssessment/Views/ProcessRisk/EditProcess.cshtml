@model EditUserModel
@{

    ViewData["Title"] = "Create Process";
}
<div id="app">
    <div class="pt-3">
        <div class="row pt-5">
            <div class="col pt-2">
                <h3 class=" text-white">@ViewData["Title"]</h3>
            </div>
            <div class="col-auto ml-auto ">
                <a class="btn btn-outline-warning text-white" asp-action="@ProcessRiskController.ActionProcessRisk"
                   asp-controller="@ProcessRiskController.Name"><i class="fa fa-arrow-circle-left"></i> Back</a>

            </div>
        </div>
    </div>
   
    <div class="row mt-2">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5>
                        Process Detail
                    </h5>
                    <hr />
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="process_name" class="col-form-label">Process Name</label><label class="text-danger">*</label>
                                <input class="form-control" type="text" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label for="sec" class="col-form-label">Section</label>

                                <select class="custom-select">
                                    <option Value="P7EV">P7EV</option>
                                    @* @foreach (var item in Model.Division_ddl)
                                    {
                                    <option value="@item.Value">@item.Text</option>
                                    }*@
                                </select>

                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label for="div" class="col-form-label">Division</label>
                                <select class="custom-select" disabled>
                                    <option Value="General Production">General Production</option>
                                    @* @foreach (var item in Model.Division_ddl)
                                    {
                                    <option value="@item.Value">@item.Text</option>
                                    }*@
                                </select>
                            </div>
                        </div>

                    </div>
                    <hr />
                    <h5>
                        Process Flow and Interaction.
                    </h5>
                    <hr />
                    <div class="row">
                        <div class="col-12">
                            <div class="input-group">
                                <div class="custom-file">
                                    <input type="file" class="custom-file-input" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04">
                                    <label class="custom-file-label" for="inputGroupFile04">Choose file</label>
                                </div>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon04">Upload</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-12" id="img_col" style="display:none">
                            <div class="text-center" style="resize: both;overflow: auto;background-color:darkgray">
                                <img src="#" id="img_pre" alt="image" style="width:70%">
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="card-footer">
                    <button class="btn btn-success">Save</button>
                </div>*@
            </div>
        </div>
    </div>
    <div class="row pt-2">   
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5>
                        Process Identification
                    </h5>
                    <hr />
                    <div class="row align-items-end">
                        <div class="col">
                            <ul class="list-group">
                                <li class="list-group-item active"><h5>Machine/Equipment</h5></li>
                                <li v-for="(item,index) in process_idtfy.MachineEqp" class="list-group-item">

                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" v-model="process_idtfy.MachineEqp[index]">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-danger btn-xs" type="button" @@click="process_idtfy.MachineEqp[index] = ''"><i class="fa-solid fa-circle-xmark"></i></button>
                                        </div>
                                    </div>

                                </li>
                                <li class="list-group-item">
                                    <button class="btn btn-xs btn-block btn-info" @@click="process_idtfy.MachineEqp.push('')"><i class="fa fa-plus-circle"></i> Add</button>
                                </li>
                                
                            </ul>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col">
                                    <h1 class="text-primary">
                                        <i class="fa-solid fa-arrow-turn-down fa-2x"></i>
                                    </h1>

                                </div>
                                <div class="col text-right">
                                    <h1 class="text-primary">
                                        <i class="fa-solid fa-arrow-turn-up  fa-rotate-180  fa-2x"></i>
                                    </h1>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <ul class="list-group">
                                <li class="list-group-item active"><h5>Man</h5></li>
                                
                                <li v-for="(item,index) in process_idtfy.Man" class="list-group-item">
                                   
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" v-model="process_idtfy.Man[index]">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-danger btn-xs" type="button" @@click="process_idtfy.Man[index] = ''"><i class="fa-solid fa-circle-xmark"></i></button>
                                        </div>
                                    </div>

                                </li>
                                <li class="list-group-item" >
                                    <button class="btn btn-xs btn-block btn-info" @@click="process_idtfy.Man.push('')"><i class="fa fa-plus-circle"></i> Add</button>
                                </li>

                            </ul>
                        </div>
                    </div>
                    <br />
                    <div class="row align-items-center">
                        <div class="col">
                            <ul class="list-group">
                                <li class="list-group-item active"><h5>Input</h5></li>
                                <li v-for="(item,index) in process_idtfy.Input" class="list-group-item">

                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" v-model="process_idtfy.Input[index]">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-danger btn-xs" type="button" @@click="process_idtfy.Input[index] = ''"><i class="fa-solid fa-circle-xmark"></i></button>
                                        </div>
                                    </div>

                                </li>
                                <li class="list-group-item">
                                    <button class="btn btn-xs btn-block btn-info" @@click="process_idtfy.Input.push('')"><i class="fa fa-plus-circle"></i> Add</button>
                                </li>
                            </ul>
                        </div>
                        <div class="col ">
                            <div class="row align-items-center">
                                <div class="col-auto  ">

                                    <h1 class="text-primary">
                                        <i class="fa-solid fa-arrow-right fa-beat fa-xl"></i>
                                    </h1>
                                </div>
                                <div class="col text-center p-0">
                                    <div class="alert alert-primary p-3" role="alert">
                                        <h4>Process name</h4>
                                        <br />
                                        <input class="form-control" type="text" readonly/>
                                        @*<h5 class="card-subtitle">Wastewater Treatment</h5>*@
                                    </div>

                                </div>
                                <div class="col-auto ">
                                    <h1 class="text-primary">
                                        <i class="fa-solid fa-arrow-right fa-beat fa-xl"></i>
                                    </h1>
                                </div>
                            </div>

                        </div>
                        <div class="col">
                            <ul class="list-group">
                                <li class="list-group-item active"><h5>Output</h5></li>
                                <li v-for="(item,index) in process_idtfy.Output" class="list-group-item">

                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" v-model="process_idtfy.Output[index]">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-danger btn-xs" type="button" @@click="process_idtfy.Output[index] = ''"><i class="fa-solid fa-circle-xmark"></i></button>
                                        </div>
                                    </div>

                                </li>
                                <li class="list-group-item">
                                    <button class="btn btn-xs btn-block btn-info" @@click="process_idtfy.Output.push('')"><i class="fa fa-plus-circle"></i> Add</button>
                                </li>

                            </ul>
                        </div>
                    </div>
                    <br />
                    <div class="row align-items-start">
                        <div class="col">
                            <ul class="list-group">
                                <li class="list-group-item active"><h5>Method</h5></li>
                                <li v-for="(item,index) in process_idtfy.Method" class="list-group-item">

                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" v-model="process_idtfy.Method[index]">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-danger btn-xs" type="button" @@click="process_idtfy.Method[index] = ''"><i class="fa-solid fa-circle-xmark"></i></button>
                                        </div>
                                    </div>

                                </li>
                                <li class="list-group-item">
                                    <button class="btn btn-xs btn-block btn-info" @@click="process_idtfy.Method.push('')"><i class="fa fa-plus-circle"></i> Add</button>
                                </li>

                            </ul>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col">
                                    <h1 class="text-primary">
                                        <i class="fa-solid fa-arrow-turn-up fa-2x"></i>
                                    </h1>

                                </div>
                                <div class="col text-right">
                                    <h1 class="text-primary">
                                        <i class="fa-solid fa-arrow-turn-down  fa-rotate-180  fa-2x"></i>
                                    </h1>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <ul class="list-group">
                                <li class="list-group-item active"><h5>Control/Measurement</h5></li>
                                <li v-for="(item,index) in process_idtfy.Control" class="list-group-item">

                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" v-model="process_idtfy.Control[index]">
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-danger btn-xs" type="button" @@click="process_idtfy.Control[index] = ''"><i class="fa-solid fa-circle-xmark"></i></button>
                                        </div>
                                    </div>

                                </li>
                                <li class="list-group-item">
                                    <button class="btn btn-xs btn-block btn-info" @@click="process_idtfy.Control.push('')"><i class="fa fa-plus-circle"></i> Add</button>
                                </li>
                            </ul>
                        </div>
                    </div>                 
                </div>
                <div class="card-footer">
                    <button class="btn btn-success">Save Change</button>
                </div>
                <div id="sample">
                    <div style="width: 100%; display: flex; justify-content: space-between">
                        <div id="myPaletteDiv" style="width: 100px; margin-right: 2px; background-color: rgb(40, 44, 52); position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0); cursor: auto;"><canvas tabindex="0" width="100" height="750" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 100px; height: 750px; cursor: auto;">This text is displayed if your browser does not support the Canvas HTML element.</canvas><div style="position: absolute; overflow: auto; width: 100px; height: 750px; z-index: 1;"><div style="position: absolute; width: 1px; height: 1px;"></div></div></div>
                        <div id="myDiagramDiv" style="flex-grow: 1; height: 750px; background-color: rgb(40, 44, 52); position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0); cursor: auto;"><canvas tabindex="0" width="954" height="750" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 954px; height: 750px; cursor: auto;">This text is displayed if your browser does not support the Canvas HTML element.</canvas><div style="position: absolute; overflow: auto; width: 954px; height: 750px; z-index: 1;"><div style="position: absolute; width: 1px; height: 1px;"></div></div></div>

                    </div>
                    
                    <button id="SaveButton" onclick="save()">Save</button>
                    <button onclick="load()">Load</button>
                    Diagram Model saved in JSON format:
<textarea id="mySavedModel" style="width:100%;height:300px">
  { "class": "go.GraphLinksModel",
"linkFromPortIdProperty": "fromPort",
"linkToPortIdProperty": "toPort",
"nodeDataArray": [
{"category":"Comment", "loc":"360 -10", "text":"Kookie Brittle", "key":-13},
{"key":-1, "category":"Start", "loc":"175 0", "text":"Start"},
{"key":0, "loc":"-5 75", "text":"Preheat oven to 375 F"},
{"key":1, "loc":"175 100", "text":"In a bowl, blend: 1 cup margarine, 1.5 teaspoon vanilla, 1 teaspoon salt"},
{"key":2, "loc":"175 200", "text":"Gradually beat in 1 cup sugar and 2 cups sifted flour"},
{"key":3, "loc":"175 290", "text":"Mix in 6 oz (1 cup) Nestle's Semi-Sweet Chocolate Morsels"},
{"key":4, "loc":"175 380", "text":"Press evenly into ungreased 15x10x1 pan"},
{"key":5, "loc":"355 85", "text":"Finely chop 1/2 cup of your choice of nuts"},
{"key":6, "loc":"175 450", "text":"Sprinkle nuts on top"},
{"key":7, "loc":"175 515", "text":"Bake for 25 minutes and let cool"},
{"key":8, "loc":"175 585", "text":"Cut into rectangular grid"},
{"key":-2, "category":"End", "loc":"175 660", "text":"Enjoy!"}
],
"linkDataArray": [
{"from":1, "to":2, "fromPort":"B", "toPort":"T"},
{"from":2, "to":3, "fromPort":"B", "toPort":"T"},
{"from":3, "to":4, "fromPort":"B", "toPort":"T"},
{"from":4, "to":6, "fromPort":"B", "toPort":"T"},
{"from":6, "to":7, "fromPort":"B", "toPort":"T"},
{"from":7, "to":8, "fromPort":"B", "toPort":"T"},
{"from":8, "to":-2, "fromPort":"B", "toPort":"T"},
{"from":-1, "to":0, "fromPort":"B", "toPort":"T"},
{"from":-1, "to":1, "fromPort":"B", "toPort":"T"},
{"from":-1, "to":5, "fromPort":"B", "toPort":"T"},
{"from":5, "to":4, "fromPort":"B", "toPort":"T"},
{"from":0, "to":4, "fromPort":"B", "toPort":"T"}
]}
</textarea>
                    <button onclick="printDiagram()">Print Diagram Using SVG</button>
                    <p class="text-xs">GoJS version 2.3.8. Copyright 1998-2023 by Northwoods Software.</p>
                </div>
            </div>
        </div>
    </div>
   
</div>

@section Scripts{

    <script>
        var data = {
            "class": "go.GraphLinksModel",
            "linkFromPortIdProperty": "fromPort",
            "linkToPortIdProperty": "toPort",
            "nodeDataArray": [
                { "text": "Chemical Treatment", "key": -2, "loc": "-5.249534606933594 152.875" },
                { "text": "Wastewater", "key": -3, "loc": "-5 52.625" },
                { "text": "Chemical Treatment", "key": -4, "loc": "-5 238.625" },
                { "text": "IEAT\n(control Ruality)", "key": -5, "loc": "-222 153.625" },
                { "text": "Supplier\n(Chemical)", "key": -6, "loc": "175 152.625" }
            ],
            "linkDataArray": [
                { "from": -3, "to": -2, "fromPort": "B", "toPort": "T", "points": [-5, 69.64616470336915, -5, 79.64616470336915, -5, 102.75, -5.249534606933594, 102.75, -5.249534606933594, 125.85383529663085, -5.249534606933594, 135.85383529663085] },
                { "from": -2, "to": -4, "fromPort": "B", "toPort": "T", "points": [-5.249534606933594, 169.89616470336912, -5.249534606933594, 179.89616470336912, -5.249534606933594, 195.75, -5, 195.75, -5, 211.60383529663085, -5, 221.60383529663085] },
                { "from": -6, "to": -2, "fromPort": "L", "toPort": "R", "points": [129.25552368164062, 152.625, 119.25552368164062, 152.625, 100.58340454101562, 152.625, 100.58340454101562, 152.875, 81.91128540039062, 152.875, 71.91128540039062, 152.875] },
                { "from": -5, "to": -2, "fromPort": "R", "toPort": "L", "points": [-157.78396606445312, 153.625, -147.78396606445312, 153.625, -120.09716033935547, 153.625, -120.09716033935547, 152.875, -92.41035461425781, 152.875, -82.41035461425781, 152.875] }
            ]
        
        }

    </script>
    <script id="code">
        function init() {
            if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this

            // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
            // For details, see https://gojs.net/latest/intro/buildingObjects.html
            const $ = go.GraphObject.make;  // for conciseness in defining templates

            myDiagram =
                new go.Diagram("myDiagramDiv",  // must name or refer to the DIV HTML element
                    {

                        "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                        "LinkRelinked": showLinkLabel,
                        "undoManager.isEnabled": true  // enable undo & redo
                    });

            // when the document is modified, add a "*" to the title and enable the "Save" button
            myDiagram.addDiagramListener("Modified", e => {
                var button = document.getElementById("SaveButton");
                if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf("*");
                if (myDiagram.isModified) {
                    if (idx < 0) document.title += "*";
                } else {
                    if (idx >= 0) document.title = document.title.slice(0, idx);
                }
            });

            // helper definitions for node templates

            function nodeStyle() {
                return [
                    // The Node.location comes from the "loc" property of the node data,
                    // converted by the Point.parse static method.
                    // If the Node.location is changed, it updates the "loc" property of the node data,
                    // converting back using the Point.stringify static method.
                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                    {
                        // the Node.location is at the center of each node
                        locationSpot: go.Spot.Center
                    }
                ];
            }

            // Define a function for creating a "port" that is normally transparent.
            // The "name" is used as the GraphObject.portId,
            // the "align" is used to determine where to position the port relative to the body of the node,
            // the "spot" is used to control how links connect with the port and whether the port
            // stretches along the side of the node,
            // and the boolean "output" and "input" arguments control whether the user can draw links from or to the port.
            function makePort(name, align, spot, output, input) {
                var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);
                // the port is basically just a transparent rectangle that stretches along the side of the node,
                // and becomes colored when the mouse passes over it
                return $(go.Shape,
                    {
                        fill: "transparent",  // changed to a color in the mouseEnter event handler
                        strokeWidth: 0,  // no stroke
                        width: horizontal ? NaN : 8,  // if not stretching horizontally, just 8 wide
                        height: !horizontal ? NaN : 8,  // if not stretching vertically, just 8 tall
                        alignment: align,  // align the port on the main Shape
                        stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),
                        portId: name,  // declare this object to be a "port"
                        fromSpot: spot,  // declare where links may connect at this port
                        fromLinkable: output,  // declare whether the user may draw links from here
                        toSpot: spot,  // declare where links may connect at this port
                        toLinkable: input,  // declare whether the user may draw links to here
                        cursor: "pointer",  // show a different cursor to indicate potential link point
                        mouseEnter: (e, port) => {  // the PORT argument will be this Shape
                            if (!e.diagram.isReadOnly) port.fill = "rgba(255,255,255,0.5)";
                        },
                        mouseLeave: (e, port) => port.fill = "transparent"
                    });
            }

            function textStyle() {
                return {
                    font: "bold 11pt Nunito, Kanit, Sarabun, sans-serif",

                    stroke: "#F8F8F8"
                }
            }

            // define the Node templates for regular nodes

            myDiagram.nodeTemplateMap.add("",  // the default category
                $(go.Node, "Table", nodeStyle(),
                    // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                    $(go.Panel, "Auto",
                        $(go.Shape, "Rectangle",
                            { fill: "#282c34", stroke: "#00A9C9", strokeWidth: 1.5 },
                            new go.Binding("figure", "figure")),
                        $(go.TextBlock, textStyle(),
                            {
                                margin: 8,
                                maxSize: new go.Size(160, NaN),
                                wrap: go.TextBlock.WrapFit,
                                editable: true
                            },
                            new go.Binding("text").makeTwoWay())
                    ),
                    // four named ports, one on each side:
                    makePort("T", go.Spot.Top, go.Spot.TopSide, false, true),
                    makePort("L", go.Spot.Left, go.Spot.LeftSide, true, true),
                    makePort("R", go.Spot.Right, go.Spot.RightSide, true, true),
                    makePort("B", go.Spot.Bottom, go.Spot.BottomSide, true, false)
                ));

            myDiagram.nodeTemplateMap.add("Conditional",
                $(go.Node, "Table", nodeStyle(),
                    // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                    $(go.Panel, "Auto",
                        $(go.Shape, "Diamond",
                            { fill: "#282c34", stroke: "#00A9C9", strokeWidth: 3 },
                            new go.Binding("figure", "figure")),
                        $(go.TextBlock, textStyle(),
                            {
                                margin: 8,
                                maxSize: new go.Size(160, NaN),
                                wrap: go.TextBlock.WrapFit,
                                editable: true
                            },
                            new go.Binding("text").makeTwoWay())
                    ),
                    // four named ports, one on each side:
                    makePort("T", go.Spot.Top, go.Spot.Top, false, true),
                    makePort("L", go.Spot.Left, go.Spot.Left, true, true),
                    makePort("R", go.Spot.Right, go.Spot.Right, true, true),
                    makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, false)
                ));

            myDiagram.nodeTemplateMap.add("Start",
                $(go.Node, "Table", nodeStyle(),
                    $(go.Panel, "Spot",
                        $(go.Shape, "Circle",
                            { desiredSize: new go.Size(70, 70), fill: "#282c34", stroke: "#09d3ac", strokeWidth: 3.5 }),
                        $(go.TextBlock, "Start", textStyle(),
                            new go.Binding("text"))
                    ),
                    // three named ports, one on each side except the top, all output only:
                    makePort("L", go.Spot.Left, go.Spot.Left, true, false),
                    makePort("R", go.Spot.Right, go.Spot.Right, true, false),
                    makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, false)
                ));

            myDiagram.nodeTemplateMap.add("End",
                $(go.Node, "Table", nodeStyle(),
                    $(go.Panel, "Spot",
                        $(go.Shape, "Circle",
                            { desiredSize: new go.Size(60, 60), fill: "#282c34", stroke: "#DC3C00", strokeWidth: 3.5 }),
                        $(go.TextBlock, "End", textStyle(),
                            new go.Binding("text"))
                    ),
                    // three named ports, one on each side except the bottom, all input only:
                    makePort("T", go.Spot.Top, go.Spot.Top, false, true),
                    makePort("L", go.Spot.Left, go.Spot.Left, false, true),
                    makePort("R", go.Spot.Right, go.Spot.Right, false, true)
                ));

            // taken from https://unpkg.com/gojs@2.3.8/extensions/Figures.js:
            go.Shape.defineFigureGenerator("File", (shape, w, h) => {
                var geo = new go.Geometry();
                var fig = new go.PathFigure(0, 0, true); // starting point
                geo.add(fig);
                fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));
                fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));
                fig.add(new go.PathSegment(go.PathSegment.Line, w, h));
                fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());
                var fig2 = new go.PathFigure(.75 * w, 0, false);
                geo.add(fig2);
                // The Fold
                fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));
                fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));
                geo.spot1 = new go.Spot(0, .25);
                geo.spot2 = go.Spot.BottomRight;
                return geo;
            });

            myDiagram.nodeTemplateMap.add("Comment",
                $(go.Node, "Auto", nodeStyle(),
                    $(go.Shape, "File",
                        { fill: "#282c34", stroke: "#DEE0A3", strokeWidth: 3 }),
                    $(go.TextBlock, textStyle(),
                        {
                            margin: 8,
                            maxSize: new go.Size(200, NaN),
                            wrap: go.TextBlock.WrapFit,
                            textAlign: "center",
                            editable: true
                        },
                        new go.Binding("text").makeTwoWay())
                    // no ports, because no links are allowed to connect with a comment
                ));


            // replace the default Link template in the linkTemplateMap
            myDiagram.linkTemplate =
                $(go.Link,  // the whole link panel
                    {
                        routing: go.Link.AvoidsNodes,
                        curve: go.Link.JumpOver,
                        corner: 5, toShortLength: 4,
                        relinkableFrom: true,
                        relinkableTo: true,
                        reshapable: true,
                        resegmentable: true,
                        // mouse-overs subtly highlight links:
                        mouseEnter: (e, link) => link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)",
                        mouseLeave: (e, link) => link.findObject("HIGHLIGHT").stroke = "transparent",
                        selectionAdorned: false
                    },
                    new go.Binding("points").makeTwoWay(),
                    $(go.Shape,  // the highlight shape, normally transparent
                        { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
                    $(go.Shape,  // the link path shape
                        { isPanelMain: true, stroke: "gray", strokeWidth: 2 },
                        new go.Binding("stroke", "isSelected", sel => sel ? "dodgerblue" : "gray").ofObject()),
                    $(go.Shape,  // the arrowhead
                        { toArrow: "standard", strokeWidth: 0, fill: "gray" }),
                    $(go.Panel, "Auto",  // the link label, normally not visible
                        { visible: false, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5 },
                        new go.Binding("visible", "visible").makeTwoWay(),
                        $(go.Shape, "RoundedRectangle",  // the label shape
                            { fill: "#F8F8F8", strokeWidth: 0 }),
                        $(go.TextBlock, "Yes",  // the label
                            {
                                textAlign: "center",
                                font: "10pt helvetica, arial, sans-serif",
                                stroke: "#333333",
                                editable: true
                            },
                            new go.Binding("text").makeTwoWay())
                    )
                );

            // Make link labels visible if coming out of a "conditional" node.
            // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
            function showLinkLabel(e) {
                var label = e.subject.findObject("LABEL");
                if (label !== null) label.visible = (e.subject.fromNode.data.category === "Conditional");
            }

            // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
            myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
            myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;
            
            //myDiagram.isEnabled = false; //disable edit diagram
            load();  // load an initial diagram from some JSON text

            // initialize the Palette that is on the left side of the page
            myPalette =
                new go.Palette("myPaletteDiv",  // must name or refer to the DIV HTML element
                    {                       
                        // Instead of the default animation, use a custom fade-down
                        "animationManager.initialAnimationStyle": go.AnimationManager.None,
                        "InitialAnimationStarting": animateFadeDown, // Instead, animate with this function

                        nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
                        model: new go.GraphLinksModel([  // specify the contents of the Palette
                           
                            { category: "Start", text: "Start" },
                            { text: "Step" },
                            { category: "Conditional", text: "???" },
                            { category: "End", text: "End" },
                            { category: "Comment", text: "Comment" }
                        ])
                    });
           
            

            // This is a re-implementation of the default animation, except it fades in from downwards, instead of upwards.
            function animateFadeDown(e) {
                var diagram = e.diagram;
                var animation = new go.Animation();
                animation.isViewportUnconstrained = true; // So Diagram positioning rules let the animation start off-screen
                animation.easing = go.Animation.EaseOutExpo;
                animation.duration = 900;
                // Fade "down", in other words, fade in from above
                animation.add(diagram, 'position', diagram.position.copy().offset(0, 200), diagram.position);
                animation.add(diagram, 'opacity', 0, 1);
                animation.start();
            }

        } // end init


        // Show the diagram's model in JSON format that the user may edit
        function save() {
            document.getElementById("mySavedModel").value = myDiagram.model.toJson();
            myDiagram.isModified = false;
        }
        function load() {
            myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
        }

        // print the diagram by opening a new window holding SVG images of the diagram contents for each page
        function printDiagram() {
            var svgWindow = window.open();
            if (!svgWindow) return;  // failure to open a new Window
            var printSize = new go.Size(700, 960);
            var bnds = myDiagram.documentBounds;
            var x = bnds.x;
            var y = bnds.y;
            while (y < bnds.bottom) {
                while (x < bnds.right) {
                    var svg = myDiagram.makeSvg({ scale: 1.0, position: new go.Point(x, y), size: printSize });
                    svgWindow.document.body.appendChild(svg);
                    x += printSize.width;
                }
                x = bnds.x;
                y += printSize.height;
            }
            setTimeout(() => svgWindow.print(), 1);
        }
        window.addEventListener('DOMContentLoaded', init);
    </script>

    
    <script>
        $(document).ready(function () {
            bsCustomFileInput.init()

            var output = document.getElementById('img_pre');
            imgInp = document.getElementById('inputGroupFile04');
            imgInp.onchange = evt => {
                $('#img_col').show()
                const [file] = imgInp.files
                if (file) {
                    output.src = URL.createObjectURL(file)
                }
            }
        })
        

        const { createApp } = Vue
        const app = createApp({
            data() {
                return {      
                    process:{
                        ProcessName:'',
                        Division:'',
                        Section:'',
                        FlowFile:'',
                        FileName:''
                    },
                    process_idtfy:{
                        MachineEqp:[''],
                        Man: [''],
                        Method: [''],
                        Control:[''],
                        Input: [''],
                        Output: ['']

                    }
                }
            },
            computed: {
                computedValue: {
                    get() {
                        return this.myValue;
                    },
                    set(newValue) {
                        this.updateValue(newValue);
                    }
                }
            },
            mounted() {

            },
            methods:{

            }
        }).mount('#app');
    </script>
}